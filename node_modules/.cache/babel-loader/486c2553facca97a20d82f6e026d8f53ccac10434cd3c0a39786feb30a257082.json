{"ast":null,"code":"var _jsxFileName = \"D:\\\\UNIV\\\\2024 2\\uD559\\uAE30\\\\Open Source Software\\\\TermProject\\\\oceanfish\\\\src\\\\components\\\\ContributionCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../css/ContributionCalendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContributionCalendar() {\n  _s();\n  const [contributions, setContributions] = useState([]);\n  const [error, setError] = useState(null); // 에러 상태 추가\n  const username = 'xeohyun'; // 자신의 GitHub 사용자 이름\n  const token = process.env.REACT_APP_GITHUB_TOKEN; // 환경 변수에서 토큰 가져오기\n\n  useEffect(() => {\n    async function fetchGitHubContributions() {\n      try {\n        console.log(\"Fetching contributions for:\", username);\n        console.log(\"Using token:\", token ? \"Token is set\" : \"Token is missing\");\n        const response = await fetch(`https://api.github.com/users/${username}/events/public`, {\n          headers: {\n            Authorization: `token ${token}` // Authorization 헤더 추가\n          }\n        });\n        console.log(\"Response status:\", response.status);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched data:\", data);\n        const contributionMap = {};\n        data.forEach(event => {\n          const date = event.created_at.split('T')[0];\n          contributionMap[date] = (contributionMap[date] || 0) + 1; // 날짜별 커밋 수\n        });\n        const sortedData = Object.entries(contributionMap).map(([date, commits]) => ({\n          date,\n          commits: Math.min(commits, 4) // 최대 4단계 제한\n        }));\n        console.log(\"Parsed contributions:\", sortedData);\n        setContributions(sortedData);\n      } catch (err) {\n        console.error(\"Error fetching contributions:\", err.message);\n        setError(err.message); // 에러 상태 업데이트\n      }\n    }\n    fetchGitHubContributions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contribution-calendar\",\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Failed to load contributions: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: contributions.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `day-cell level-${day.commits}`,\n        title: `${day.date}: ${day.commits} commits`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(ContributionCalendar, \"X4KKoONEUg6WAEh3XIRxGGukbSo=\");\n_c = ContributionCalendar;\nexport default ContributionCalendar;\nvar _c;\n$RefreshReg$(_c, \"ContributionCalendar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ContributionCalendar","_s","contributions","setContributions","error","setError","username","token","process","env","REACT_APP_GITHUB_TOKEN","fetchGitHubContributions","console","log","response","fetch","headers","Authorization","status","ok","Error","data","json","contributionMap","forEach","event","date","created_at","split","sortedData","Object","entries","map","commits","Math","min","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","index","title","_c","$RefreshReg$"],"sources":["D:/UNIV/2024 2학기/Open Source Software/TermProject/oceanfish/src/components/ContributionCalendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../css/ContributionCalendar.css';\r\n\r\nfunction ContributionCalendar() {\r\n    const [contributions, setContributions] = useState([]);\r\n    const [error, setError] = useState(null); // 에러 상태 추가\r\n    const username = 'xeohyun'; // 자신의 GitHub 사용자 이름\r\n    const token = process.env.REACT_APP_GITHUB_TOKEN; // 환경 변수에서 토큰 가져오기\r\n\r\n    useEffect(() => {\r\n        async function fetchGitHubContributions() {\r\n            try {\r\n                console.log(\"Fetching contributions for:\", username);\r\n                console.log(\"Using token:\", token ? \"Token is set\" : \"Token is missing\");\r\n\r\n                const response = await fetch(\r\n                    `https://api.github.com/users/${username}/events/public`,\r\n                    {\r\n                        headers: {\r\n                            Authorization: `token ${token}`, // Authorization 헤더 추가\r\n                        },\r\n                    }\r\n                );\r\n\r\n                console.log(\"Response status:\", response.status);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                console.log(\"Fetched data:\", data);\r\n\r\n                const contributionMap = {};\r\n                data.forEach((event) => {\r\n                    const date = event.created_at.split('T')[0];\r\n                    contributionMap[date] = (contributionMap[date] || 0) + 1; // 날짜별 커밋 수\r\n                });\r\n\r\n                const sortedData = Object.entries(contributionMap).map(([date, commits]) => ({\r\n                    date,\r\n                    commits: Math.min(commits, 4), // 최대 4단계 제한\r\n                }));\r\n\r\n                console.log(\"Parsed contributions:\", sortedData);\r\n                setContributions(sortedData);\r\n            } catch (err) {\r\n                console.error(\"Error fetching contributions:\", err.message);\r\n                setError(err.message); // 에러 상태 업데이트\r\n            }\r\n        }\r\n\r\n        fetchGitHubContributions();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"contribution-calendar\">\r\n            {error ? (\r\n                <div className=\"error-message\">\r\n                    <p>Failed to load contributions: {error}</p>\r\n                </div>\r\n            ) : (\r\n                <div className=\"calendar-grid\">\r\n                    {contributions.map((day, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`day-cell level-${day.commits}`}\r\n                            title={`${day.date}: ${day.commits} commits`}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContributionCalendar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAMS,QAAQ,GAAG,SAAS,CAAC,CAAC;EAC5B,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC,CAAC;;EAElDd,SAAS,CAAC,MAAM;IACZ,eAAee,wBAAwBA,CAAA,EAAG;MACtC,IAAI;QACAC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEP,QAAQ,CAAC;QACpDM,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,KAAK,GAAG,cAAc,GAAG,kBAAkB,CAAC;QAExE,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CACxB,gCAAgCT,QAAQ,gBAAgB,EACxD;UACIU,OAAO,EAAE;YACLC,aAAa,EAAE,SAASV,KAAK,EAAE,CAAE;UACrC;QACJ,CACJ,CAAC;QAEDK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACI,MAAM,CAAC;QAEhD,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,oBAAoBN,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC1D;QAEA,MAAMG,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEQ,IAAI,CAAC;QAElC,MAAME,eAAe,GAAG,CAAC,CAAC;QAC1BF,IAAI,CAACG,OAAO,CAAEC,KAAK,IAAK;UACpB,MAAMC,IAAI,GAAGD,KAAK,CAACE,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAC3CL,eAAe,CAACG,IAAI,CAAC,GAAG,CAACH,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC;QAEF,MAAMG,UAAU,GAAGC,MAAM,CAACC,OAAO,CAACR,eAAe,CAAC,CAACS,GAAG,CAAC,CAAC,CAACN,IAAI,EAAEO,OAAO,CAAC,MAAM;UACzEP,IAAI;UACJO,OAAO,EAAEC,IAAI,CAACC,GAAG,CAACF,OAAO,EAAE,CAAC,CAAC,CAAE;QACnC,CAAC,CAAC,CAAC;QAEHrB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEgB,UAAU,CAAC;QAChD1B,gBAAgB,CAAC0B,UAAU,CAAC;MAChC,CAAC,CAAC,OAAOO,GAAG,EAAE;QACVxB,OAAO,CAACR,KAAK,CAAC,+BAA+B,EAAEgC,GAAG,CAACC,OAAO,CAAC;QAC3DhC,QAAQ,CAAC+B,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAC3B;IACJ;IAEA1B,wBAAwB,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIZ,OAAA;IAAKuC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,EACjCnC,KAAK,gBACFL,OAAA;MAAKuC,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC1BxC,OAAA;QAAAwC,QAAA,GAAG,gCAA8B,EAACnC,KAAK;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,gBAEN5C,OAAA;MAAKuC,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBrC,aAAa,CAAC8B,GAAG,CAAC,CAACY,GAAG,EAAEC,KAAK,kBAC1B9C,OAAA;QAEIuC,SAAS,EAAE,kBAAkBM,GAAG,CAACX,OAAO,EAAG;QAC3Ca,KAAK,EAAE,GAAGF,GAAG,CAAClB,IAAI,KAAKkB,GAAG,CAACX,OAAO;MAAW,GAFxCY,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGR,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC1C,EAAA,CAvEQD,oBAAoB;AAAA+C,EAAA,GAApB/C,oBAAoB;AAyE7B,eAAeA,oBAAoB;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}