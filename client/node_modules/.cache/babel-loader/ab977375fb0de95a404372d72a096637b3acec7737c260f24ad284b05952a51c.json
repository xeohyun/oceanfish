{"ast":null,"code":"var _jsxFileName = \"D:\\\\UNIV\\\\2024 2\\uD559\\uAE30\\\\Open Source Software\\\\TermProject\\\\oceanfish\\\\client\\\\src\\\\components\\\\MovingFish.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport dustLeft from '../img/dust_left.png';\nimport dustLeft1 from '../img/dust_left1.png';\nimport dustRight from '../img/dust_right.png';\nimport dustRight1 from '../img/dust_right1.png';\nimport fishLeft from '../img/adult_left.png';\nimport fishLeft1 from '../img/adult_left1.png';\nimport fishRight from '../img/adult_right.png';\nimport fishRight1 from '../img/adult_right1.png';\nimport '../css/MovingFish.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MovingFish() {\n  _s();\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  }); // Fish position\n  const [direction, setDirection] = useState('right'); // Movement direction\n  const [frame, setFrame] = useState(0); // Animation frame\n  const [stage, setStage] = useState('dust'); // Fish stage (dust/fish)\n  const [isAlive, setIsAlive] = useState(true); // Fish alive state\n  const [level, setLevel] = useState(1); // Fish level\n\n  // 이미지 맵 정의\n  const images = {\n    dust: {\n      left: [dustLeft],\n      right: [dustRight]\n    },\n    fish: {\n      left: [fishLeft, fishLeft1],\n      right: [fishRight, fishRight1]\n    }\n  };\n\n  // Fetch initial fish data from backend\n  useEffect(() => {\n    const fetchFishData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\n        if (!response.ok) {\n          throw new Error('Failed to fetch fish data');\n        }\n        const data = await response.json();\n        setLevel(data.level);\n        setStage(data.level <= 3 ? 'dust' : 'fish');\n        setIsAlive(data.is_alive);\n      } catch (error) {\n        console.error('Error fetching fish data:', error);\n      }\n    };\n    fetchFishData();\n  }, []);\n\n  // Random movement logic\n  useEffect(() => {\n    if (!isAlive) return;\n    const moveFish = () => {\n      setPosition(prev => ({\n        x: Math.max(0, Math.min(window.innerWidth - 150, prev.x + (Math.random() * 100 - 50))),\n        y: Math.max(0, Math.min(window.innerHeight - 150, prev.y + (Math.random() * 100 - 50)))\n      }));\n\n      // 방향 전환은 천천히 이루어지도록 간격을 둠\n      const shouldChangeDirection = Math.random() > 0.7; // 20% 확률로 방향 변경\n      if (shouldChangeDirection) {\n        setDirection(prev => prev === 'left' ? 'right' : 'left');\n      }\n      setFrame(prevFrame => prevFrame === 0 ? 1 : 0); // Alternate frame for animation\n    };\n    const interval = setInterval(moveFish, 4000); // Move every 4 seconds (더 느리게 이동)\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isAlive]);\n\n  // Handle fish death\n  useEffect(() => {\n    if (!isAlive) {\n      console.log('The fish has died!');\n    }\n  }, [isAlive]);\n\n  // Image selection based on state\n  const getImageSrc = () => {\n    return images[stage][direction] /*[frame]*/;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAlive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moving-fish\",\n      style: {\n        position: 'absolute',\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n        transition: 'top 4s ease, left 4s ease' // 천천히 이동\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: getImageSrc(),\n        alt: stage,\n        style: {\n          width: '80px',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(MovingFish, \"gLxK7WftqGKq0E0ROcXLAVezGh0=\");\n_c = MovingFish;\nexport default MovingFish;\nvar _c;\n$RefreshReg$(_c, \"MovingFish\");","map":{"version":3,"names":["React","useState","useEffect","dustLeft","dustLeft1","dustRight","dustRight1","fishLeft","fishLeft1","fishRight","fishRight1","jsxDEV","_jsxDEV","Fragment","_Fragment","MovingFish","_s","position","setPosition","x","y","direction","setDirection","frame","setFrame","stage","setStage","isAlive","setIsAlive","level","setLevel","images","dust","left","right","fish","fetchFishData","response","fetch","ok","Error","data","json","is_alive","error","console","moveFish","prev","Math","max","min","window","innerWidth","random","innerHeight","shouldChangeDirection","prevFrame","interval","setInterval","clearInterval","log","getImageSrc","children","className","style","top","transition","src","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/UNIV/2024 2학기/Open Source Software/TermProject/oceanfish/client/src/components/MovingFish.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport dustLeft from '../img/dust_left.png';\r\nimport dustLeft1 from '../img/dust_left1.png';\r\nimport dustRight from '../img/dust_right.png';\r\nimport dustRight1 from '../img/dust_right1.png';\r\nimport fishLeft from '../img/adult_left.png';\r\nimport fishLeft1 from '../img/adult_left1.png';\r\nimport fishRight from '../img/adult_right.png';\r\nimport fishRight1 from '../img/adult_right1.png';\r\nimport '../css/MovingFish.css';\r\n\r\nfunction MovingFish() {\r\n    const [position, setPosition] = useState({ x: 0, y: 0 }); // Fish position\r\n    const [direction, setDirection] = useState('right'); // Movement direction\r\n    const [frame, setFrame] = useState(0); // Animation frame\r\n    const [stage, setStage] = useState('dust'); // Fish stage (dust/fish)\r\n    const [isAlive, setIsAlive] = useState(true); // Fish alive state\r\n    const [level, setLevel] = useState(1); // Fish level\r\n\r\n    // 이미지 맵 정의\r\n    const images = {\r\n        dust: {\r\n            left: [dustLeft],\r\n            right: [dustRight],\r\n        },\r\n        fish: {\r\n            left: [fishLeft, fishLeft1],\r\n            right: [fishRight, fishRight1],\r\n        },\r\n    };\r\n\r\n    // Fetch initial fish data from backend\r\n    useEffect(() => {\r\n        const fetchFishData = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch fish data');\r\n                }\r\n                const data = await response.json();\r\n                setLevel(data.level);\r\n                setStage(data.level <= 3 ? 'dust' : 'fish');\r\n                setIsAlive(data.is_alive);\r\n            } catch (error) {\r\n                console.error('Error fetching fish data:', error);\r\n            }\r\n        };\r\n\r\n        fetchFishData();\r\n    }, []);\r\n\r\n    // Random movement logic\r\n    useEffect(() => {\r\n        if (!isAlive) return;\r\n\r\n        const moveFish = () => {\r\n            setPosition((prev) => ({\r\n                x: Math.max(0, Math.min(window.innerWidth - 150, prev.x + (Math.random() * 100 - 50))),\r\n                y: Math.max(0, Math.min(window.innerHeight - 150, prev.y + (Math.random() * 100 - 50))),\r\n            }));\r\n\r\n            // 방향 전환은 천천히 이루어지도록 간격을 둠\r\n            const shouldChangeDirection = Math.random() > 0.7; // 20% 확률로 방향 변경\r\n            if (shouldChangeDirection) {\r\n                setDirection((prev) => (prev === 'left' ? 'right' : 'left'));\r\n            }\r\n\r\n            setFrame((prevFrame) => (prevFrame === 0 ? 1 : 0)); // Alternate frame for animation\r\n        };\r\n\r\n        const interval = setInterval(moveFish, 4000); // Move every 4 seconds (더 느리게 이동)\r\n        return () => clearInterval(interval); // Cleanup interval on unmount\r\n    }, [isAlive]);\r\n\r\n    // Handle fish death\r\n    useEffect(() => {\r\n        if (!isAlive) {\r\n            console.log('The fish has died!');\r\n        }\r\n    }, [isAlive]);\r\n\r\n    // Image selection based on state\r\n    const getImageSrc = () => {\r\n        return images[stage][direction]/*[frame]*/;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isAlive && (\r\n                <div\r\n                    className=\"moving-fish\"\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: `${position.x}px`,\r\n                        top: `${position.y}px`,\r\n                        transition: 'top 4s ease, left 4s ease', // 천천히 이동\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={getImageSrc()}\r\n                        alt={stage}\r\n                        style={{ width: '80px', height: 'auto' }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MovingFish;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAM8B,MAAM,GAAG;IACXC,IAAI,EAAE;MACFC,IAAI,EAAE,CAAC9B,QAAQ,CAAC;MAChB+B,KAAK,EAAE,CAAC7B,SAAS;IACrB,CAAC;IACD8B,IAAI,EAAE;MACFF,IAAI,EAAE,CAAC1B,QAAQ,EAAEC,SAAS,CAAC;MAC3B0B,KAAK,EAAE,CAACzB,SAAS,EAAEC,UAAU;IACjC;EACJ,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACZ,MAAMkC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;QAClE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCZ,QAAQ,CAACW,IAAI,CAACZ,KAAK,CAAC;QACpBH,QAAQ,CAACe,IAAI,CAACZ,KAAK,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC;QAC3CD,UAAU,CAACa,IAAI,CAACE,QAAQ,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IAEDR,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACyB,OAAO,EAAE;IAEd,MAAMmB,QAAQ,GAAGA,CAAA,KAAM;MACnB5B,WAAW,CAAE6B,IAAI,KAAM;QACnB5B,CAAC,EAAE6B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACC,MAAM,CAACC,UAAU,GAAG,GAAG,EAAEL,IAAI,CAAC5B,CAAC,IAAI6B,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QACtFjC,CAAC,EAAE4B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACC,MAAM,CAACG,WAAW,GAAG,GAAG,EAAEP,IAAI,CAAC3B,CAAC,IAAI4B,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;MAC1F,CAAC,CAAC,CAAC;;MAEH;MACA,MAAME,qBAAqB,GAAGP,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;MACnD,IAAIE,qBAAqB,EAAE;QACvBjC,YAAY,CAAEyB,IAAI,IAAMA,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAO,CAAC;MAChE;MAEAvB,QAAQ,CAAEgC,SAAS,IAAMA,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,MAAMC,QAAQ,GAAGC,WAAW,CAACZ,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9C,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAAC9B,OAAO,CAAC,CAAC;;EAEb;EACAzB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACyB,OAAO,EAAE;MACVkB,OAAO,CAACe,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ,CAAC,EAAE,CAACjC,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMkC,WAAW,GAAGA,CAAA,KAAM;IACtB,OAAO9B,MAAM,CAACN,KAAK,CAAC,CAACJ,SAAS,CAAC;EACnC,CAAC;EAED,oBACIT,OAAA,CAAAE,SAAA;IAAAgD,QAAA,EACKnC,OAAO,iBACJf,OAAA;MACImD,SAAS,EAAC,aAAa;MACvBC,KAAK,EAAE;QACH/C,QAAQ,EAAE,UAAU;QACpBgB,IAAI,EAAE,GAAGhB,QAAQ,CAACE,CAAC,IAAI;QACvB8C,GAAG,EAAE,GAAGhD,QAAQ,CAACG,CAAC,IAAI;QACtB8C,UAAU,EAAE,2BAA2B,CAAE;MAC7C,CAAE;MAAAJ,QAAA,eAEFlD,OAAA;QACIuD,GAAG,EAAEN,WAAW,CAAC,CAAE;QACnBO,GAAG,EAAE3C,KAAM;QACXuC,KAAK,EAAE;UAAEK,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EACR,gBACH,CAAC;AAEX;AAAC1D,EAAA,CAhGQD,UAAU;AAAA4D,EAAA,GAAV5D,UAAU;AAkGnB,eAAeA,UAAU;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}