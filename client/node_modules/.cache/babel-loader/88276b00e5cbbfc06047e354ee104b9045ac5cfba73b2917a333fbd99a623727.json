{"ast":null,"code":"var _jsxFileName = \"D:\\\\UNIV\\\\2024 2\\uD559\\uAE30\\\\Open Source Software\\\\TermProject\\\\oceanfish\\\\client\\\\src\\\\components\\\\OceanSunFish.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../css/OceanSunFish.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OceanSunFish() {\n  _s();\n  const [level, setLevel] = useState(1); // Initial level\n  const [dailyContribution, setDailyContribution] = useState(0); // Placeholder for daily contribution\n  const [stage, setStage] = useState('dust'); // Initial stage\n\n  // Simulate daily contribution updates\n  useEffect(() => {\n    // Example: Fetch daily contributions (replace with real API call)\n    const fetchDailyContribution = () => {\n      const contribution = Math.floor(Math.random() * 5) + 1; // Simulated contribution (1–5)\n      setDailyContribution(contribution);\n      setLevel(prevLevel => prevLevel + contribution); // Increase level by contribution\n    };\n    const interval = setInterval(fetchDailyContribution, 24 * 60 * 60 * 1000); // Every 24 hours\n    return () => clearInterval(interval); // Cleanup\n  }, []);\n\n  // Update stage based on level\n  useEffect(() => {\n    if (level >= 1 && level <= 3) {\n      setStage('dust'); // 먼지 단계\n    } else if (level >= 4 && level <= 10) {\n      setStage('baby'); // 아기 단계\n    } else if (level >= 11 && level <= 30) {\n      setStage('adult'); // 개복치 단계\n    } else if (level >= 31 && level <= 50) {\n      setStage('king'); // 왕복치 단계\n    } else if (level >= 51) {\n      setStage('new'); // 새로운 개복치 생성\n      setLevel(1); // Reset level for new ocean sunfish\n    }\n  }, [level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ocean-level-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Stage: \", stage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ocean-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `../img/ocean-${stage}.png` // Dynamically load images based on stage\n        ,\n        alt: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Today's Contribution: \", dailyContribution]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(OceanSunFish, \"BwFJJtQy67WFxiwyDHl/nvynI1I=\");\n_c = OceanSunFish;\nexport default OceanSunFish;\nvar _c;\n$RefreshReg$(_c, \"OceanSunFish\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","OceanSunFish","_s","level","setLevel","dailyContribution","setDailyContribution","stage","setStage","fetchDailyContribution","contribution","Math","floor","random","prevLevel","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["D:/UNIV/2024 2학기/Open Source Software/TermProject/oceanfish/client/src/components/OceanSunFish.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../css/OceanSunFish.css';\r\n\r\nfunction OceanSunFish() {\r\n    const [level, setLevel] = useState(1); // Initial level\r\n    const [dailyContribution, setDailyContribution] = useState(0); // Placeholder for daily contribution\r\n    const [stage, setStage] = useState('dust'); // Initial stage\r\n\r\n    // Simulate daily contribution updates\r\n    useEffect(() => {\r\n        // Example: Fetch daily contributions (replace with real API call)\r\n        const fetchDailyContribution = () => {\r\n            const contribution = Math.floor(Math.random() * 5) + 1; // Simulated contribution (1–5)\r\n            setDailyContribution(contribution);\r\n            setLevel((prevLevel) => prevLevel + contribution); // Increase level by contribution\r\n        };\r\n\r\n        const interval = setInterval(fetchDailyContribution, 24 * 60 * 60 * 1000); // Every 24 hours\r\n        return () => clearInterval(interval); // Cleanup\r\n    }, []);\r\n\r\n    // Update stage based on level\r\n    useEffect(() => {\r\n        if (level >= 1 && level <= 3) {\r\n            setStage('dust'); // 먼지 단계\r\n        } else if (level >= 4 && level <= 10) {\r\n            setStage('baby'); // 아기 단계\r\n        } else if (level >= 11 && level <= 30) {\r\n            setStage('adult'); // 개복치 단계\r\n        } else if (level >= 31 && level <= 50) {\r\n            setStage('king'); // 왕복치 단계\r\n        } else if (level >= 51) {\r\n            setStage('new'); // 새로운 개복치 생성\r\n            setLevel(1); // Reset level for new ocean sunfish\r\n        }\r\n    }, [level]);\r\n\r\n    return (\r\n        <div className=\"ocean-level-container\">\r\n            <h2>Level: {level}</h2>\r\n            <p>Stage: {stage}</p>\r\n            <div className=\"ocean-image\">\r\n                <img\r\n                    src={`../img/ocean-${stage}.png`} // Dynamically load images based on stage\r\n                    alt={stage}\r\n                />\r\n            </div>\r\n            <p>Today's Contribution: {dailyContribution}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OceanSunFish;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}