{"ast":null,"code":"/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport dustLeft from '../img/dust_left.png';\r\nimport dustRight from '../img/dust_right.png';\r\nimport fishLeft from '../img/adult_left.png';\r\nimport fishLeft1 from '../img/adult_left1.png';\r\nimport fishRight from '../img/adult_right.png';\r\nimport fishRight1 from '../img/adult_right1.png';\r\nimport kingLeft from '../img/king_left.png';\r\nimport kingRight from '../img/king_right.png'\r\nimport '../css/MovingFish.css';\r\n\r\nfunction MovingFish() {\r\n    const [position, setPosition] = useState({ x: 0, y: 0 }); // Fish position\r\n    const [direction, setDirection] = useState('right'); // Movement direction\r\n    const [frame, setFrame] = useState(0); // Animation frame\r\n    const [stage, setStage] = useState('dust'); // Fish stage (dust/fish)\r\n    const [isAlive, setIsAlive] = useState(true); // Fish alive state\r\n    const [level, setLevel] = useState(1); // Fish level\r\n\r\n    // 이미지 맵 정의\r\n    const images = {\r\n        dust: {\r\n            left: [dustLeft],\r\n            right: [dustRight],\r\n        },\r\n        fish: {\r\n            left: [fishLeft, fishLeft1],\r\n            right: [fishRight, fishRight1],\r\n        },\r\n        king: {\r\n            left: [kingLeft],\r\n            right: [kingRight],\r\n        }\r\n    };\r\n\r\n    // Fetch initial fish data from backend\r\n    useEffect(() => {\r\n        const fetchFishData = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch fish data');\r\n                }\r\n                const data = await response.json();\r\n                setLevel(data.level);\r\n                setStage(data.level <= 3 ? 'dust' : 'fish');\r\n                setIsAlive(data.is_alive);\r\n            } catch (error) {\r\n                console.error('Error fetching fish data:', error);\r\n            }\r\n        };\r\n\r\n        fetchFishData();\r\n    }, []);\r\n\r\n    // Random movement logic\r\n    useEffect(() => {\r\n        if (!isAlive) return;\r\n\r\n        const moveFish = () => {\r\n            setPosition((prev) => ({\r\n                x: Math.max(0, Math.min(window.innerWidth - 150, prev.x + (Math.random() * 100 - 50))),\r\n                y: Math.max(0, Math.min(window.innerHeight - 150, prev.y + (Math.random() * 100 - 50))),\r\n            }));\r\n\r\n            // 방향 전환은 천천히 이루어지도록 간격을 둠\r\n            const shouldChangeDirection = Math.random() > 0.7; // 30% 확률로 방향 변경\r\n            if (shouldChangeDirection) {\r\n                setDirection((prev) => (prev === 'left' ? 'right' : 'left'));\r\n            }\r\n\r\n            setFrame((prevFrame) => (prevFrame === 0 ? 1 : 0)); // Alternate frame for animation\r\n        };\r\n\r\n        const interval = setInterval(moveFish, 3000); // Move every 4 seconds (더 느리게 이동)\r\n        return () => clearInterval(interval); // Cleanup interval on unmount\r\n    }, [isAlive]);\r\n\r\n    // Handle fish death\r\n    useEffect(() => {\r\n        if (!isAlive) {\r\n            console.log('The fish has died!');\r\n        }\r\n    }, [isAlive]);\r\n\r\n    // Image selection based on state\r\n    const getImageSrc = () => {\r\n        return images[stage][direction]/!*[frame]*!/;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isAlive && (\r\n                <div\r\n                    className=\"moving-fish\"\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: `${position.x}px`,\r\n                        top: `${position.y}px`,\r\n                        transition: 'top 2s ease, left 2 ease', // 천천히 이동\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={getImageSrc()}\r\n                        alt={stage}\r\n                        style={{ width: '80px', height: 'auto' }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MovingFish;*/","map":{"version":3,"names":[],"sources":["D:/UNIV/2024 2학기/Open Source Software/TermProject/oceanfish/client/src/components/MovingFish.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport dustLeft from '../img/dust_left.png';\r\nimport dustRight from '../img/dust_right.png';\r\nimport fishLeft from '../img/adult_left.png';\r\nimport fishLeft1 from '../img/adult_left1.png';\r\nimport fishRight from '../img/adult_right.png';\r\nimport fishRight1 from '../img/adult_right1.png';\r\nimport kingLeft from '../img/king_left.png';\r\nimport kingRight from '../img/king_right.png'\r\nimport '../css/MovingFish.css';\r\n\r\nfunction MovingFish() {\r\n    const [position, setPosition] = useState({ x: 0, y: 0 }); // Fish position\r\n    const [direction, setDirection] = useState('right'); // Movement direction\r\n    const [frame, setFrame] = useState(0); // Animation frame\r\n    const [stage, setStage] = useState('dust'); // Fish stage (dust/fish)\r\n    const [isAlive, setIsAlive] = useState(true); // Fish alive state\r\n    const [level, setLevel] = useState(1); // Fish level\r\n\r\n    // 이미지 맵 정의\r\n    const images = {\r\n        dust: {\r\n            left: [dustLeft],\r\n            right: [dustRight],\r\n        },\r\n        fish: {\r\n            left: [fishLeft, fishLeft1],\r\n            right: [fishRight, fishRight1],\r\n        },\r\n        king: {\r\n            left: [kingLeft],\r\n            right: [kingRight],\r\n        }\r\n    };\r\n\r\n    // Fetch initial fish data from backend\r\n    useEffect(() => {\r\n        const fetchFishData = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch fish data');\r\n                }\r\n                const data = await response.json();\r\n                setLevel(data.level);\r\n                setStage(data.level <= 3 ? 'dust' : 'fish');\r\n                setIsAlive(data.is_alive);\r\n            } catch (error) {\r\n                console.error('Error fetching fish data:', error);\r\n            }\r\n        };\r\n\r\n        fetchFishData();\r\n    }, []);\r\n\r\n    // Random movement logic\r\n    useEffect(() => {\r\n        if (!isAlive) return;\r\n\r\n        const moveFish = () => {\r\n            setPosition((prev) => ({\r\n                x: Math.max(0, Math.min(window.innerWidth - 150, prev.x + (Math.random() * 100 - 50))),\r\n                y: Math.max(0, Math.min(window.innerHeight - 150, prev.y + (Math.random() * 100 - 50))),\r\n            }));\r\n\r\n            // 방향 전환은 천천히 이루어지도록 간격을 둠\r\n            const shouldChangeDirection = Math.random() > 0.7; // 30% 확률로 방향 변경\r\n            if (shouldChangeDirection) {\r\n                setDirection((prev) => (prev === 'left' ? 'right' : 'left'));\r\n            }\r\n\r\n            setFrame((prevFrame) => (prevFrame === 0 ? 1 : 0)); // Alternate frame for animation\r\n        };\r\n\r\n        const interval = setInterval(moveFish, 3000); // Move every 4 seconds (더 느리게 이동)\r\n        return () => clearInterval(interval); // Cleanup interval on unmount\r\n    }, [isAlive]);\r\n\r\n    // Handle fish death\r\n    useEffect(() => {\r\n        if (!isAlive) {\r\n            console.log('The fish has died!');\r\n        }\r\n    }, [isAlive]);\r\n\r\n    // Image selection based on state\r\n    const getImageSrc = () => {\r\n        return images[stage][direction]/!*[frame]*!/;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isAlive && (\r\n                <div\r\n                    className=\"moving-fish\"\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: `${position.x}px`,\r\n                        top: `${position.y}px`,\r\n                        transition: 'top 2s ease, left 2 ease', // 천천히 이동\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={getImageSrc()}\r\n                        alt={stage}\r\n                        style={{ width: '80px', height: 'auto' }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MovingFish;*/\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}