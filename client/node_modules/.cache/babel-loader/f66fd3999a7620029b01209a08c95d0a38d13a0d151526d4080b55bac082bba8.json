{"ast":null,"code":"var _jsxFileName = \"D:\\\\UNIV\\\\2024 2\\uD559\\uAE30\\\\Open Source Software\\\\TermProject\\\\oceanfish\\\\client\\\\src\\\\components\\\\OceanSunFish.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport dustLeft from '../img/dust_left.png';\nimport dustRight from '../img/dust_right.png';\nimport fishLeft from '../img/adult_left.png';\nimport fishLeft1 from '../img/adult_left1.png';\nimport fishRight from '../img/adult_right.png';\nimport fishRight1 from '../img/adult_right1.png';\nimport '../css/OceanSunFish.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OceanSunFish() {\n  _s();\n  const [sunfish, setSunfish] = useState(null); // 현재 Sunfish 데이터를 저장\n  const [animationFrame, setAnimationFrame] = useState(0); // 애니메이션 프레임 (0, 1)\n\n  const images = {\n    dust: [dustLeft, dustRight],\n    baby: [dustLeft, dustRight],\n    adult: [fishLeft, fishLeft1],\n    king: [fishRight, fishRight1]\n  };\n\n  // API에서 데이터를 가져오는 함수\n  useEffect(() => {\n    const fetchSunfishData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\n        if (!response.ok) {\n          throw new Error('Failed to fetch sunfish data');\n        }\n        const data = await response.json();\n        if (Array.isArray(data) && data.length > 0) {\n          // 가장 최근 Sunfish를 설정\n          const latestSunfish = data[data.length - 1];\n          setSunfish(latestSunfish);\n        } else {\n          console.warn(\"No Sunfish data available\");\n          setSunfish(null); // Sunfish 데이터가 없을 경우\n        }\n      } catch (error) {\n        console.error('Error fetching sunfish data:', error);\n      }\n    };\n    fetchSunfishData();\n  }, []);\n\n  // 애니메이션 프레임 변경\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAnimationFrame(prev => prev === 0 ? 1 : 0); // 프레임 0과 1을 번갈아 전환\n    }, 1000); // 1초마다 전환\n    return () => clearInterval(interval); // 컴포넌트 언마운트 시 클리어\n  }, []);\n  if (!sunfish) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Sunfish...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this); // Sunfish 데이터가 없을 경우 로딩 메시지\n  }\n\n  // 단계(stage) 계산\n  const getStage = level => {\n    if (level >= 1 && level <= 3) {\n      return 'dust';\n    } else if (level >= 4 && level <= 10) {\n      return 'baby';\n    } else if (level >= 11 && level <= 30) {\n      return 'adult';\n    } else if (level >= 31 && level <= 50) {\n      return 'king';\n    }\n    return 'dust'; // 기본값\n  };\n  const stage = getStage(sunfish.level);\n  const currentImage = images[stage][animationFrame]; // 현재 프레임에 맞는 이미지 선택\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ocean-level-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Level: \", sunfish.level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Stage: \", stage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", sunfish.is_alive ? 'Alive' : 'Dead']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ocean-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentImage,\n        alt: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Today's Contribution: \", sunfish.daily_contribution || 0]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(OceanSunFish, \"Jf3Qx9yP2Ko5sB69MEG6mLQVlK0=\");\n_c = OceanSunFish;\nexport default OceanSunFish;\nvar _c;\n$RefreshReg$(_c, \"OceanSunFish\");","map":{"version":3,"names":["React","useState","useEffect","dustLeft","dustRight","fishLeft","fishLeft1","fishRight","fishRight1","jsxDEV","_jsxDEV","OceanSunFish","_s","sunfish","setSunfish","animationFrame","setAnimationFrame","images","dust","baby","adult","king","fetchSunfishData","response","fetch","ok","Error","data","json","Array","isArray","length","latestSunfish","console","warn","error","interval","setInterval","prev","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","getStage","level","stage","currentImage","className","is_alive","src","alt","daily_contribution","_c","$RefreshReg$"],"sources":["D:/UNIV/2024 2학기/Open Source Software/TermProject/oceanfish/client/src/components/OceanSunFish.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport dustLeft from '../img/dust_left.png';\r\nimport dustRight from '../img/dust_right.png';\r\nimport fishLeft from '../img/adult_left.png';\r\nimport fishLeft1 from '../img/adult_left1.png';\r\nimport fishRight from '../img/adult_right.png';\r\nimport fishRight1 from '../img/adult_right1.png';\r\nimport '../css/OceanSunFish.css';\r\n\r\nfunction OceanSunFish() {\r\n    const [sunfish, setSunfish] = useState(null); // 현재 Sunfish 데이터를 저장\r\n    const [animationFrame, setAnimationFrame] = useState(0); // 애니메이션 프레임 (0, 1)\r\n\r\n    const images = {\r\n        dust: [dustLeft, dustRight],\r\n        baby: [dustLeft, dustRight],\r\n        adult: [fishLeft, fishLeft1],\r\n        king: [fishRight, fishRight1],\r\n    };\r\n\r\n    // API에서 데이터를 가져오는 함수\r\n    useEffect(() => {\r\n        const fetchSunfishData = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/sunfish/');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch sunfish data');\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (Array.isArray(data) && data.length > 0) {\r\n                    // 가장 최근 Sunfish를 설정\r\n                    const latestSunfish = data[data.length - 1];\r\n                    setSunfish(latestSunfish);\r\n                } else {\r\n                    console.warn(\"No Sunfish data available\");\r\n                    setSunfish(null); // Sunfish 데이터가 없을 경우\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching sunfish data:', error);\r\n            }\r\n        };\r\n\r\n        fetchSunfishData();\r\n    }, []);\r\n\r\n    // 애니메이션 프레임 변경\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setAnimationFrame((prev) => (prev === 0 ? 1 : 0)); // 프레임 0과 1을 번갈아 전환\r\n        }, 1000); // 1초마다 전환\r\n        return () => clearInterval(interval); // 컴포넌트 언마운트 시 클리어\r\n    }, []);\r\n\r\n    if (!sunfish) {\r\n        return <div>Loading Sunfish...</div>; // Sunfish 데이터가 없을 경우 로딩 메시지\r\n    }\r\n\r\n    // 단계(stage) 계산\r\n    const getStage = (level) => {\r\n        if (level >= 1 && level <= 3) {\r\n            return 'dust';\r\n        } else if (level >= 4 && level <= 10) {\r\n            return 'baby';\r\n        } else if (level >= 11 && level <= 30) {\r\n            return 'adult';\r\n        } else if (level >= 31 && level <= 50) {\r\n            return 'king';\r\n        }\r\n        return 'dust'; // 기본값\r\n    };\r\n\r\n    const stage = getStage(sunfish.level);\r\n    const currentImage = images[stage][animationFrame]; // 현재 프레임에 맞는 이미지 선택\r\n\r\n    return (\r\n        <div className=\"ocean-level-container\">\r\n            <h2>Level: {sunfish.level}</h2>\r\n            <p>Stage: {stage}</p>\r\n            <p>Status: {sunfish.is_alive ? 'Alive' : 'Dead'}</p>\r\n            <div className=\"ocean-image\">\r\n                <img src={currentImage} alt={stage} />\r\n            </div>\r\n            <p>Today's Contribution: {sunfish.daily_contribution || 0}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OceanSunFish;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}